use alloy_core::primitives::Address;
use alloy_core::sol;
use alloy_provider::Provider;
use alloy_rpc_types::TransactionRequest;
use reqwest;

pub async fn fund_sequencer(
    signer_address: Address,
    sequencer_address: Address,
    provider: Box<dyn Provider<alloy_transport_http::Http<reqwest::Client>>>,
) {
    let tx = TransactionRequest::default()
        .from(signer_address)
        .to(sequencer_address)
        .value("30000000000000000000".parse().unwrap());
    // Send the transaction and wait for the broadcast.
    let pending_tx = provider.send_transaction(tx).await.unwrap();
    // Wait for the transaction to be included and get the receipt.
    let _receipt = pending_tx.get_receipt().await.unwrap();
}

// Codegen from ABI file to interact with the contract.
sol!(
  #[allow(missing_docs)]
  #[allow(dead_code)]
  #[sol(bytecode = "6080604052348015600e575f80fd5b506107918061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80631789cd631461004e57806361a93c871461007e578063677087c9146100ae578063837298e9146100de575b5f80fd5b610068600480360381019061006391906103ae565b6100fa565b6040516100759190610423565b60405180910390f35b6100986004803603810190610093919061043c565b610238565b6040516100a5919061047f565b60405180910390f35b6100c860048036038101906100c391906104c2565b610280565b6040516100d59190610423565b60405180910390f35b6100f860048036038101906100f39190610500565b6102e0565b005b5f805f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f818054905090505f468733434244878c8c60405160240161016499989796959493929190610639565b60405160208183030381529060405263837298e960e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f818051906020012090508381908060018154018082558091505060019003905f5260205f20015f9091909190915055828873ffffffffffffffffffffffffffffffffffffffff167fc05d337121a6e8605c6ec0b72aa29c4210ffe6e5b9cefdd6a7058188a8f66f9884604051610222919061070e565b60405180910390a3809450505050509392505050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805490509050919050565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2082815481106102cf576102ce61072e565b5b905f5260205f200154905092915050565b505050505050505050565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61031c826102f3565b9050919050565b61032c81610312565b8114610336575f80fd5b50565b5f8135905061034781610323565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261036e5761036d61034d565b5b8235905067ffffffffffffffff81111561038b5761038a610351565b5b6020830191508360018202830111156103a7576103a6610355565b5b9250929050565b5f805f604084860312156103c5576103c46102eb565b5b5f6103d286828701610339565b935050602084013567ffffffffffffffff8111156103f3576103f26102ef565b5b6103ff86828701610359565b92509250509250925092565b5f819050919050565b61041d8161040b565b82525050565b5f6020820190506104365f830184610414565b92915050565b5f60208284031215610451576104506102eb565b5b5f61045e84828501610339565b91505092915050565b5f819050919050565b61047981610467565b82525050565b5f6020820190506104925f830184610470565b92915050565b6104a181610467565b81146104ab575f80fd5b50565b5f813590506104bc81610498565b92915050565b5f80604083850312156104d8576104d76102eb565b5b5f6104e585828601610339565b92505060206104f6858286016104ae565b9150509250929050565b5f805f805f805f805f6101008a8c03121561051e5761051d6102eb565b5b5f61052b8c828d016104ae565b995050602061053c8c828d01610339565b985050604061054d8c828d01610339565b975050606061055e8c828d016104ae565b965050608061056f8c828d016104ae565b95505060a06105808c828d016104ae565b94505060c06105918c828d016104ae565b93505060e08a013567ffffffffffffffff8111156105b2576105b16102ef565b5b6105be8c828d01610359565b92509250509295985092959850929598565b6105d981610312565b82525050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f61061883856105df565b93506106258385846105ef565b61062e836105fd565b840190509392505050565b5f6101008201905061064d5f83018c610470565b61065a602083018b6105d0565b610667604083018a6105d0565b6106746060830189610470565b6106816080830188610470565b61068e60a0830187610470565b61069b60c0830186610470565b81810360e08301526106ae81848661060d565b90509a9950505050505050505050565b5f81519050919050565b8281835e5f83830152505050565b5f6106e0826106be565b6106ea81856105df565b93506106fa8185602086016106c8565b610703816105fd565b840191505092915050565b5f6020820190508181035f83015261072681846106d6565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220170ea2b6b0dca75d1f0ed969e8703922be925699df71cc2b5f493dbf5af2b09964736f6c634300081a0033")]
  #[sol(rpc)]
  #[derive(Debug)]
  contract InputBox {

    event InputAdded(
      address indexed appContract,
      uint256 indexed index,
      bytes input
    );
    /// @notice Mapping of application contract addresses to arrays of input hashes.
    mapping(address => bytes32[]) private _inputBoxes;

    constructor() {}

    function EvmAdvance(
      uint256 chainId,
      address appContract,
      address msgSender,
      uint256 blockNumber,
      uint256 blockTimestamp,
      uint256 prevRandao,
      uint256 index,
      bytes calldata payload
    ) external;

    function addInput(
      address appContract,
      bytes calldata payload
    ) external returns (bytes32) {
      bytes32[] storage inputBox = _inputBoxes[appContract];
      uint256 index = inputBox.length;
      bytes memory input = abi.encodeCall(
        InputBox.EvmAdvance,
        (
          block.chainid,
          appContract,
          msg.sender,
          block.number,
          block.timestamp,
          block.prevrandao,
          index,
          payload
        )
      );

      bytes32 inputHash = keccak256(input);

      inputBox.push(inputHash);

      emit InputAdded(appContract, index, input);

      return inputHash;
    }

    function getNumberOfInputs(
      address appContract
    ) external view returns (uint256) {
      return _inputBoxes[appContract].length;
    }

    function getInputHash(
      address appContract,
      uint256 index
    ) external view returns (bytes32) {
      return _inputBoxes[appContract][index];
    }
  }
);
